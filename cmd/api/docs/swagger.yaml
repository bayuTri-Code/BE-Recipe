basePath: /
definitions:
  models.Favorite:
    properties:
      id:
        type: string
      recipe_id:
        type: string
      user_id:
        type: string
    type: object
  models.Ingredient:
    properties:
      amount:
        type: string
      id:
        type: string
      name:
        type: string
      recipe_id:
        type: string
    type: object
  models.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  models.LoginResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserResponse'
      message:
        type: string
      success:
        type: boolean
      token:
        type: string
    type: object
  models.Photo:
    properties:
      id:
        type: string
      recipe_id:
        type: string
      url:
        type: string
    type: object
  models.Recipe:
    properties:
      category:
        type: string
      cook_time:
        type: integer
      created_at:
        type: string
      description:
        type: string
      favorites:
        items:
          $ref: '#/definitions/models.Favorite'
        type: array
      id:
        type: string
      ingredients:
        items:
          $ref: '#/definitions/models.Ingredient'
        type: array
      photos:
        items:
          $ref: '#/definitions/models.Photo'
        type: array
      prep_time:
        type: integer
      servings:
        type: integer
      steps:
        items:
          $ref: '#/definitions/models.Step'
        type: array
      title:
        type: string
      updated_at:
        type: string
      user:
        allOf:
        - $ref: '#/definitions/models.User'
        description: Relations
      user_id:
        type: string
    type: object
  models.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    required:
    - email
    - name
    - password
    type: object
  models.RegisterResponse:
    properties:
      data:
        $ref: '#/definitions/models.UserResponse'
      message:
        type: string
      success:
        type: boolean
    type: object
  models.ResponseError:
    properties:
      message:
        type: string
      status:
        type: string
    type: object
  models.Step:
    properties:
      detail:
        type: string
      id:
        type: string
      number:
        type: integer
      recipe_id:
        type: string
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      favorites:
        items:
          $ref: '#/definitions/models.Favorite'
        type: array
      id:
        type: string
      name:
        type: string
      recipes:
        items:
          $ref: '#/definitions/models.Recipe'
        type: array
      updated_at:
        type: string
    type: object
  models.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
host: http://192.168.100.247:8080
info:
  contact: {}
  description: API documentation for Auth Service
  title: Recipe API
  version: "1.0"
paths:
  /api/{id}/favorites/{user_id}:
    delete:
      description: Delete a favorite by ID
      parameters:
      - description: Favorite ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Remove recipe from favorites
      tags:
      - Favorites
  /api/{user_id}/favorites:
    post:
      consumes:
      - application/json
      description: Add a recipe to user's favorite list
      parameters:
      - description: Favorite Data
        in: body
        name: favorite
        required: true
        schema:
          $ref: '#/definitions/models.Favorite'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Favorite'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Add recipe to favorites
      tags:
      - Favorites
  /api/favorites:
    get:
      consumes:
      - application/json
      description: Get all favorite recipes of the logged in user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Favorite'
            type: array
        "401":
          description: Unauthorized
          schema:
            additionalProperties:
              allOf:
              - type: string
              - properties:
                  error:
                    type: string
                type: object
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              allOf:
              - type: string
              - properties:
                  error:
                    type: string
                type: object
            type: object
      security:
      - BearerAuth: []
      summary: Get all favorite recipes by user
      tags:
      - Favorites
  /api/recipes:
    get:
      description: Retrieve all available recipes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Recipe'
            type: array
      summary: Get all recipes
      tags:
      - Recipes
    post:
      consumes:
      - application/json
      description: Create a new recipe with title, description, category, prep_time,
        cook_time
      parameters:
      - description: Recipe Data
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/models.Recipe'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.Recipe'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new recipe
      tags:
      - Recipes
  /api/recipes/{id}:
    delete:
      description: Delete a recipe by ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete recipe
      tags:
      - Recipes
    get:
      description: Retrieve a recipe by its ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get recipe by ID
      tags:
      - Recipes
    put:
      consumes:
      - application/json
      description: Update recipe details by ID
      parameters:
      - description: Recipe ID
        in: path
        name: id
        required: true
        type: string
      - description: Updated Recipe
        in: body
        name: recipe
        required: true
        schema:
          $ref: '#/definitions/models.Recipe'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Recipe'
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: Not Found
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update recipe
      tags:
      - Recipes
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Login user
      tags:
      - Auth
  /auth/register:
    post:
      consumes:
      - application/json
      description: Register a new user
      parameters:
      - description: Register request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/models.ResponseError'
      summary: Register user
      tags:
      - Auth
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
